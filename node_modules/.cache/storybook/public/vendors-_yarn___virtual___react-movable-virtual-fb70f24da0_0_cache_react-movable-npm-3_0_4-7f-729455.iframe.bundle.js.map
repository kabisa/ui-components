{"version":3,"file":"vendors-_yarn___virtual___react-movable-virtual-fb70f24da0_0_cache_react-movable-npm-3_0_4-7f-729455.iframe.bundle.js","mappingsfsources":["webpack://ui-components/./.yarn/__virtual__/react-movable-virtual-fb70f24da0/0/cache/react-movable-npm-3.0.4-7fcbc69adb-fe12f72e93.zip/node_modules/react-movable/lib/List.js","webpack://ui-components/./.yarn/__virtual__/react-movable-virtual-fb70f24da0/0/cache/react-movable-npm-3.0.4-7fcbc69adb-fe12f72e93.zip/node_modules/react-movable/lib/index.js","webpack://ui-components/./.yarn/__virtual__/react-movable-virtual-fb70f24da0/0/cache/react-movable-npm-3.0.4-7fcbc69adb-fe12f72e93.zip/node_modules/react-movable/lib/utils.js","webpack://ui-components/./.yarn/cache/classnames-npm-2.3.2-d2fdae468d-ba3151c12e.zip/node_modules/classnames/index.js"],"sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { getTranslateOffset, transformItem, setItemTransition, binarySearch, schd, isTouchEvent, checkIfInteractive } from './utils.js';\nconst AUTOSCROLL_ACTIVE_OFFSET = 200;\nconst AUTOSCROLL_SPEED_RATIO = 10;\nclass List extends React.Component {\n    constructor(props) {\n        super(props);\n        this.listRef = React.createRef();\n        this.ghostRef = React.createRef();\n        this.topOffsets = [];\n        this.itemTranslateOffsets = [];\n        this.initialYOffset = 0;\n        this.lastScroll = 0;\n        this.lastYOffset = 0;\n        this.lastListYOffset = 0;\n        this.needle = -1;\n        this.afterIndex = -2;\n        this.state = {\n            itemDragged: -1,\n            itemDraggedOutOfBounds: -1,\n            selectedItem: -1,\n            initialX: 0,\n            initialY: 0,\n            targetX: 0,\n            targetY: 0,\n            targetHeight: 0,\n            targetWidth: 0,\n            liveText: '',\n            scrollingSpeed: 0,\n            scrollWindow: false\n        };\n        this.doScrolling = () => {\n            const { scrollingSpeed, scrollWindow } = this.state;\n            const listEl = this.listRef.current;\n            window.requestAnimationFrame(() => {\n                if (scrollWindow) {\n                    window.scrollTo(window.pageXOffset, window.pageYOffset + scrollingSpeed * 1.5);\n                }\n                else {\n                    listEl.scrollTop += scrollingSpeed;\n                }\n                if (scrollingSpeed !== 0) {\n                    this.doScrolling();\n                }\n            });\n        };\n        this.getChildren = () => {\n            if (this.listRef && this.listRef.current) {\n                return Array.from(this.listRef.current.children);\n            }\n            console.warn('No items found in the List container. Did you forget to pass & spread the `props` param in renderList?');\n            return [];\n        };\n        this.calculateOffsets = () => {\n            this.topOffsets = this.getChildren().map((item) => item.getBoundingClientRect().top);\n            this.itemTranslateOffsets = this.getChildren().map((item) => getTranslateOffset(item));\n        };\n        this.getTargetIndex = (e) => {\n            return this.getChildren().findIndex((child) => child === e.target || child.contains(e.target));\n        };\n        this.onMouseOrTouchStart = (e) => {\n            if (this.dropTimeout && this.state.itemDragged > -1) {\n                window.clearTimeout(this.dropTimeout);\n                this.finishDrop();\n            }\n            const isTouch = isTouchEvent(e);\n            if (!isTouch && e.button !== 0)\n                return;\n            const index = this.getTargetIndex(e);\n            if (index === -1 ||\n                // @ts-ignore\n                (this.props.values[index] && this.props.values[index].disabled)) {\n                if (this.state.selectedItem !== -1) {\n                    this.setState({ selectedItem: -1 });\n                    this.finishDrop();\n                }\n                return;\n            }\n            const listItemTouched = this.getChildren()[index];\n            const handle = listItemTouched.querySelector('[data-movable-handle]');\n            if (handle && !handle.contains(e.target)) {\n                return;\n            }\n            if (checkIfInteractive(e.target, listItemTouched)) {\n                return;\n            }\n            e.preventDefault();\n            this.props.beforeDrag &&\n                this.props.beforeDrag({\n                    elements: this.getChildren(),\n                    index\n                });\n            if (isTouch) {\n                const opts = { passive: false };\n                listItemTouched.style.touchAction = 'none';\n                document.addEventListener('touchend', this.schdOnEnd, opts);\n                document.addEventListener('touchmove', this.schdOnTouchMove, opts);\n                document.addEventListener('touchcancel', this.schdOnEnd, opts);\n            }\n            else {\n                document.addEventListener('mousemove', this.schdOnMouseMove);\n                document.addEventListener('mouseup', this.schdOnEnd);\n                const listItemDragged = this.getChildren()[this.state.itemDragged];\n                if (listItemDragged && listItemDragged.style) {\n                    listItemDragged.style.touchAction = '';\n                }\n            }\n            this.onStart(listItemTouched, isTouch ? e.touches[0].clientX : e.clientX, isTouch ? e.touches[0].clientY : e.clientY, index);\n        };\n        this.getYOffset = () => {\n            const listScroll = this.listRef.current\n                ? this.listRef.current.scrollTop\n                : 0;\n            return window.pageYOffset + listScroll;\n        };\n        this.onStart = (target, clientX, clientY, index) => {\n            if (this.state.selectedItem > -1) {\n                this.setState({ selectedItem: -1 });\n                this.needle = -1;\n            }\n            const targetRect = target.getBoundingClientRect();\n            const targetStyles = window.getComputedStyle(target);\n            this.calculateOffsets();\n            this.initialYOffset = this.getYOffset();\n            this.lastYOffset = window.pageYOffset;\n            this.lastListYOffset = this.listRef.current.scrollTop;\n            this.setState({\n                itemDragged: index,\n                targetX: targetRect.left - parseInt(targetStyles['margin-left'], 10),\n                targetY: targetRect.top - parseInt(targetStyles['margin-top'], 10),\n                targetHeight: targetRect.height,\n                targetWidth: targetRect.width,\n                initialX: clientX,\n                initialY: clientY\n            });\n        };\n        this.onMouseMove = (e) => {\n            e.cancelable && e.preventDefault();\n            this.onMove(e.clientX, e.clientY);\n        };\n        this.onTouchMove = (e) => {\n            e.cancelable && e.preventDefault();\n            this.onMove(e.touches[0].clientX, e.touches[0].clientY);\n        };\n        this.onWheel = (e) => {\n            if (this.state.itemDragged < 0)\n                return;\n            this.lastScroll = this.listRef.current.scrollTop += e.deltaY;\n            this.moveOtherItems();\n        };\n        this.onMove = (clientX, clientY) => {\n            if (this.state.itemDragged === -1)\n                return null;\n            transformItem(this.ghostRef.current, clientY - this.state.initialY, this.props.lockVertically ? 0 : clientX - this.state.initialX);\n            this.autoScrolling(clientY);\n            this.moveOtherItems();\n        };\n        this.moveOtherItems = () => {\n            const targetRect = this.ghostRef.current.getBoundingClientRect();\n            const itemVerticalCenter = targetRect.top + targetRect.height / 2;\n            const offset = getTranslateOffset(this.getChildren()[this.state.itemDragged]);\n            const currentYOffset = this.getYOffset();\n            // adjust offsets if scrolling happens during the item movement\n            if (this.initialYOffset !== currentYOffset) {\n                this.topOffsets = this.topOffsets.map((offset) => offset - (currentYOffset - this.initialYOffset));\n                this.initialYOffset = currentYOffset;\n            }\n            if (this.isDraggedItemOutOfBounds() && this.props.removableByMove) {\n                this.afterIndex = this.topOffsets.length + 1;\n            }\n            else {\n                this.afterIndex = binarySearch(this.topOffsets, itemVerticalCenter);\n            }\n            this.animateItems(this.afterIndex === -1 ? 0 : this.afterIndex, this.state.itemDragged, offset);\n        };\n        this.autoScrolling = (clientY) => {\n            const { top, bottom, height } = this.listRef.current.getBoundingClientRect();\n            const viewportHeight = window.innerHeight || document.documentElement.clientHeight;\n            // autoscrolling for the window (down)\n            if (bottom > viewportHeight &&\n                viewportHeight - clientY < AUTOSCROLL_ACTIVE_OFFSET) {\n                this.setState({\n                    scrollingSpeed: Math.round((AUTOSCROLL_ACTIVE_OFFSET - (viewportHeight - clientY)) /\n                        AUTOSCROLL_SPEED_RATIO),\n                    scrollWindow: true\n                });\n                // autoscrolling for the window (up)\n            }\n            else if (top < 0 && clientY < AUTOSCROLL_ACTIVE_OFFSET) {\n                this.setState({\n                    scrollingSpeed: Math.round((AUTOSCROLL_ACTIVE_OFFSET - clientY) / -AUTOSCROLL_SPEED_RATIO),\n                    scrollWindow: true\n                });\n            }\n            else {\n                if (this.state.scrollWindow && this.state.scrollingSpeed !== 0) {\n                    this.setState({ scrollingSpeed: 0, scrollWindow: false });\n                }\n                // autoscrolling for containers with overflow\n                if (height + 20 < this.listRef.current.scrollHeight) {\n                    let scrollingSpeed = 0;\n                    if (clientY - top < AUTOSCROLL_ACTIVE_OFFSET) {\n                        scrollingSpeed = Math.round((AUTOSCROLL_ACTIVE_OFFSET - (clientY - top)) /\n                            -AUTOSCROLL_SPEED_RATIO);\n                    }\n                    else if (bottom - clientY < AUTOSCROLL_ACTIVE_OFFSET) {\n                        scrollingSpeed = Math.round((AUTOSCROLL_ACTIVE_OFFSET - (bottom - clientY)) /\n                            AUTOSCROLL_SPEED_RATIO);\n                    }\n                    if (this.state.scrollingSpeed !== scrollingSpeed) {\n                        this.setState({ scrollingSpeed });\n                    }\n                }\n            }\n        };\n        this.animateItems = (needle, movedItem, offset, animateMovedItem = false) => {\n            this.getChildren().forEach((item, i) => {\n                setItemTransition(item, this.props.transitionDuration);\n                if (movedItem === i && animateMovedItem) {\n                    if (movedItem === needle) {\n                        return transformItem(item, null);\n                    }\n                    transformItem(item, movedItem < needle\n                        ? this.itemTranslateOffsets\n                            .slice(movedItem + 1, needle + 1)\n                            .reduce((a, b) => a + b, 0)\n                        : this.itemTranslateOffsets\n                            .slice(needle, movedItem)\n                            .reduce((a, b) => a + b, 0) * -1);\n                }\n                else if (movedItem < needle && i > movedItem && i <= needle) {\n                    transformItem(item, -offset);\n                }\n                else if (i < movedItem && movedItem > needle && i >= needle) {\n                    transformItem(item, offset);\n                }\n                else {\n                    transformItem(item, null);\n                }\n            });\n        };\n        this.isDraggedItemOutOfBounds = () => {\n            const initialRect = this.getChildren()[this.state.itemDragged].getBoundingClientRect();\n            const targetRect = this.ghostRef.current.getBoundingClientRect();\n            if (Math.abs(initialRect.left - targetRect.left) > targetRect.width) {\n                if (this.state.itemDraggedOutOfBounds === -1) {\n                    this.setState({ itemDraggedOutOfBounds: this.state.itemDragged });\n                }\n                return true;\n            }\n            if (this.state.itemDraggedOutOfBounds > -1) {\n                this.setState({ itemDraggedOutOfBounds: -1 });\n            }\n            return false;\n        };\n        this.onEnd = (e) => {\n            e.cancelable && e.preventDefault();\n            document.removeEventListener('mousemove', this.schdOnMouseMove);\n            document.removeEventListener('touchmove', this.schdOnTouchMove);\n            document.removeEventListener('mouseup', this.schdOnEnd);\n            document.removeEventListener('touchup', this.schdOnEnd);\n            document.removeEventListener('touchcancel', this.schdOnEnd);\n            const removeItem = this.props.removableByMove && this.isDraggedItemOutOfBounds();\n            if (!removeItem &&\n                this.props.transitionDuration > 0 &&\n                this.afterIndex !== -2) {\n                // animate drop\n                schd(() => {\n                    setItemTransition(this.ghostRef.current, this.props.transitionDuration, 'cubic-bezier(.2,1,.1,1)');\n                    if (this.afterIndex < 1 && this.state.itemDragged === 0) {\n                        transformItem(this.ghostRef.current, 0, 0);\n                    }\n                    else {\n                        transformItem(this.ghostRef.current, \n                        // compensate window scroll\n                        -(window.pageYOffset - this.lastYOffset) +\n                            // compensate container scroll\n                            -(this.listRef.current.scrollTop - this.lastListYOffset) +\n                            (this.state.itemDragged < this.afterIndex\n                                ? this.itemTranslateOffsets\n                                    .slice(this.state.itemDragged + 1, this.afterIndex + 1)\n                                    .reduce((a, b) => a + b, 0)\n                                : this.itemTranslateOffsets\n                                    .slice(this.afterIndex < 0 ? 0 : this.afterIndex, this.state.itemDragged)\n                                    .reduce((a, b) => a + b, 0) * -1), 0);\n                    }\n                })();\n            }\n            this.dropTimeout = window.setTimeout(this.finishDrop, removeItem || this.afterIndex === -2 ? 0 : this.props.transitionDuration);\n        };\n        this.finishDrop = () => {\n            const removeItem = this.props.removableByMove && this.isDraggedItemOutOfBounds();\n            if (removeItem ||\n                (this.afterIndex > -2 && this.state.itemDragged !== this.afterIndex)) {\n                this.props.onChange({\n                    oldIndex: this.state.itemDragged,\n                    newIndex: removeItem ? -1 : Math.max(this.afterIndex, 0),\n                    targetRect: this.ghostRef.current.getBoundingClientRect()\n                });\n            }\n            this.getChildren().forEach((item) => {\n                setItemTransition(item, 0);\n                transformItem(item, null);\n                item.style.touchAction = '';\n            });\n            this.setState({ itemDragged: -1, scrollingSpeed: 0 });\n            this.afterIndex = -2;\n            // sometimes the scroll gets messed up after the drop, fix:\n            if (this.lastScroll > 0) {\n                this.listRef.current.scrollTop = this.lastScroll;\n                this.lastScroll = 0;\n            }\n        };\n        this.onKeyDown = (e) => {\n            const selectedItem = this.state.selectedItem;\n            const index = this.getTargetIndex(e);\n            if (checkIfInteractive(e.target, e.currentTarget)) {\n                return;\n            }\n            if (index === -1)\n                return;\n            if (e.key === ' ') {\n                e.preventDefault();\n                if (selectedItem === index) {\n                    if (selectedItem !== this.needle) {\n                        this.getChildren().forEach((item) => {\n                            setItemTransition(item, 0);\n                            transformItem(item, null);\n                        });\n                        this.props.onChange({\n                            oldIndex: selectedItem,\n                            newIndex: this.needle,\n                            targetRect: this.getChildren()[this.needle].getBoundingClientRect()\n                        });\n                        this.getChildren()[this.needle].focus();\n                    }\n                    this.setState({\n                        selectedItem: -1,\n                        liveText: this.props.voiceover.dropped(selectedItem + 1, this.needle + 1)\n                    });\n                    this.needle = -1;\n                }\n                else {\n                    this.setState({\n                        selectedItem: index,\n                        liveText: this.props.voiceover.lifted(index + 1)\n                    });\n                    this.needle = index;\n                    this.calculateOffsets();\n                }\n            }\n            if ((e.key === 'ArrowDown' || e.key === 'j') &&\n                selectedItem > -1 &&\n                this.needle < this.props.values.length - 1) {\n                e.preventDefault();\n                const offset = getTranslateOffset(this.getChildren()[selectedItem]);\n                this.needle++;\n                this.animateItems(this.needle, selectedItem, offset, true);\n                this.setState({\n                    liveText: this.props.voiceover.moved(this.needle + 1, false)\n                });\n            }\n            if ((e.key === 'ArrowUp' || e.key === 'k') &&\n                selectedItem > -1 &&\n                this.needle > 0) {\n                e.preventDefault();\n                const offset = getTranslateOffset(this.getChildren()[selectedItem]);\n                this.needle--;\n                this.animateItems(this.needle, selectedItem, offset, true);\n                this.setState({\n                    liveText: this.props.voiceover.moved(this.needle + 1, true)\n                });\n            }\n            if (e.key === 'Escape' && selectedItem > -1) {\n                this.getChildren().forEach((item) => {\n                    setItemTransition(item, 0);\n                    transformItem(item, null);\n                });\n                this.setState({\n                    selectedItem: -1,\n                    liveText: this.props.voiceover.canceled(selectedItem + 1)\n                });\n                this.needle = -1;\n            }\n            if ((e.key === 'Tab' || e.key === 'Enter') && selectedItem > -1) {\n                e.preventDefault();\n            }\n        };\n        this.schdOnMouseMove = schd(this.onMouseMove);\n        this.schdOnTouchMove = schd(this.onTouchMove);\n        this.schdOnEnd = schd(this.onEnd);\n    }\n    componentDidMount() {\n        this.calculateOffsets();\n        document.addEventListener('touchstart', this.onMouseOrTouchStart, {\n            passive: false,\n            capture: false\n        });\n        document.addEventListener('mousedown', this.onMouseOrTouchStart);\n    }\n    componentDidUpdate(_prevProps, prevState) {\n        if (prevState.scrollingSpeed !== this.state.scrollingSpeed &&\n            prevState.scrollingSpeed === 0) {\n            this.doScrolling();\n        }\n    }\n    componentWillUnmount() {\n        document.removeEventListener('touchstart', this.onMouseOrTouchStart);\n        document.removeEventListener('mousedown', this.onMouseOrTouchStart);\n        if (this.dropTimeout) {\n            window.clearTimeout(this.dropTimeout);\n        }\n        this.schdOnMouseMove.cancel();\n        this.schdOnTouchMove.cancel();\n        this.schdOnEnd.cancel();\n    }\n    render() {\n        const baseStyle = {\n            userSelect: 'none',\n            WebkitUserSelect: 'none',\n            MozUserSelect: 'none',\n            msUserSelect: 'none',\n            boxSizing: 'border-box',\n            position: 'relative'\n        };\n        const ghostStyle = {\n            ...baseStyle,\n            top: this.state.targetY,\n            left: this.state.targetX,\n            width: this.state.targetWidth,\n            height: this.state.targetHeight,\n            position: 'fixed',\n            marginTop: 0\n        };\n        return (React.createElement(React.Fragment, null,\n            this.props.renderList({\n                children: this.props.values.map((value, index) => {\n                    const isHidden = index === this.state.itemDragged;\n                    const isSelected = index === this.state.selectedItem;\n                    const isDisabled = \n                    // @ts-ignore\n                    this.props.values[index] && this.props.values[index].disabled;\n                    const props = {\n                        key: index,\n                        tabIndex: isDisabled ? -1 : 0,\n                        'aria-roledescription': this.props.voiceover.item(index + 1),\n                        onKeyDown: this.onKeyDown,\n                        style: {\n                            ...baseStyle,\n                            visibility: isHidden ? 'hidden' : undefined,\n                            zIndex: isSelected ? 5000 : 0\n                        }\n                    };\n                    return this.props.renderItem({\n                        value,\n                        props,\n                        index,\n                        isDragged: false,\n                        isSelected,\n                        isOutOfBounds: false\n                    });\n                }),\n                isDragged: this.state.itemDragged > -1,\n                props: {\n                    ref: this.listRef\n                }\n            }),\n            this.state.itemDragged > -1 &&\n                ReactDOM.createPortal(this.props.renderItem({\n                    value: this.props.values[this.state.itemDragged],\n                    props: {\n                        ref: this.ghostRef,\n                        style: ghostStyle,\n                        onWheel: this.onWheel\n                    },\n                    index: this.state.itemDragged,\n                    isDragged: true,\n                    isSelected: false,\n                    isOutOfBounds: this.state.itemDraggedOutOfBounds > -1\n                }), this.props.container || document.body),\n            React.createElement(\"div\", { \"aria-live\": \"assertive\", role: \"log\", \"aria-atomic\": \"true\", style: {\n                    position: 'absolute',\n                    width: '1px',\n                    height: '1px',\n                    margin: '-1px',\n                    border: '0px',\n                    padding: '0px',\n                    overflow: 'hidden',\n                    clip: 'rect(0px, 0px, 0px, 0px)',\n                    clipPath: 'inset(100%)'\n                } }, this.state.liveText)));\n    }\n}\nList.defaultProps = {\n    transitionDuration: 300,\n    lockVertically: false,\n    removableByMove: false,\n    voiceover: {\n        item: (position) => `You are currently at a draggable item at position ${position}. Press space bar to lift.`,\n        lifted: (position) => `You have lifted item at position ${position}. Press j to move down, k to move up, space bar to drop and escape to cancel.`,\n        moved: (position, up) => `You have moved the lifted item ${up ? 'up' : 'down'} to position ${position}. Press j to move down, k to move up, space bar to drop and escape to cancel.`,\n        dropped: (from, to) => `You have dropped the item. It has moved from position ${from} to ${to}.`,\n        canceled: (position) => `You have cancelled the movement. The item has returned to its starting position of ${position}.`\n    }\n};\nexport default List;\n","import List from './List.js';\nimport { arrayMove, arrayRemove } from './utils.js';\nexport { List, arrayMove, arrayRemove };\n","export function arrayMove(array, from, to) {\n    array = array.slice();\n    array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);\n    return array;\n}\nexport function arrayRemove(array, index) {\n    array = array.slice();\n    array.splice(index, 1);\n    return array;\n}\nexport function getTranslateOffset(element) {\n    const style = window.getComputedStyle(element);\n    return (Math.max(parseInt(style['margin-top'], 10), parseInt(style['margin-bottom'], 10)) + element.getBoundingClientRect().height);\n}\nexport function isTouchEvent(event) {\n    return ((event.touches && event.touches.length) ||\n        (event.changedTouches && event.changedTouches.length));\n}\nexport function transformItem(element, offsetY = 0, offsetX = 0) {\n    if (!element)\n        return;\n    if (offsetY === null || offsetX === null) {\n        element.style.removeProperty('transform');\n        return;\n    }\n    element.style.transform = `translate(${offsetX}px, ${offsetY}px)`;\n}\nexport function isItemTransformed(element) {\n    return !!element.style.transform;\n}\nexport function setItemTransition(element, duration, timing) {\n    if (element) {\n        element.style['transition'] = `transform ${duration}ms${timing ? ` ${timing}` : ''}`;\n    }\n}\n// returns the \"slot\" for the targetValue, aka where it should go\n// in an ordered \"array\", it starts with -1 index\nexport function binarySearch(array, targetValue) {\n    let min = 0;\n    let max = array.length - 1;\n    let guess;\n    while (min <= max) {\n        guess = Math.floor((max + min) / 2);\n        if (!array[guess + 1] ||\n            (array[guess] <= targetValue && array[guess + 1] >= targetValue)) {\n            return guess;\n        }\n        else if (array[guess] < targetValue && array[guess + 1] < targetValue) {\n            min = guess + 1;\n        }\n        else {\n            max = guess - 1;\n        }\n    }\n    return -1;\n}\n// adapted from https://github.com/alexreardon/raf-schd\nexport const schd = (fn) => {\n    let lastArgs = [];\n    let frameId = null;\n    const wrapperFn = (...args) => {\n        lastArgs = args;\n        if (frameId) {\n            return;\n        }\n        frameId = requestAnimationFrame(() => {\n            frameId = null;\n            fn(...lastArgs);\n        });\n    };\n    wrapperFn.cancel = () => {\n        if (frameId) {\n            cancelAnimationFrame(frameId);\n        }\n    };\n    return wrapperFn;\n};\nexport function checkIfInteractive(target, rootElement) {\n    const DISABLED_ELEMENTS = [\n        'input',\n        'textarea',\n        'select',\n        'option',\n        'optgroup',\n        'video',\n        'audio',\n        'button',\n        'a'\n    ];\n    const DISABLED_ROLES = ['button', 'link', 'checkbox', 'tab'];\n    while (target !== rootElement) {\n        if (target.getAttribute('data-movable-handle')) {\n            return false;\n        }\n        if (DISABLED_ELEMENTS.includes(target.tagName.toLowerCase())) {\n            return true;\n        }\n        const role = target.getAttribute('role');\n        if (role && DISABLED_ROLES.includes(role.toLowerCase())) {\n            return true;\n        }\n        if (target.tagName.toLowerCase() === 'label' &&\n            target.hasAttribute('for')) {\n            return true;\n        }\n        if (target.tagName)\n            target = target.parentElement;\n    }\n    return false;\n}\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"],"names":[],"sourceRoot":""}